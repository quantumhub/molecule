Fully annotated b43 ucode:
https://github.com/pfalcon/b43-ucode/blob/master/rev5/ucode5.asm

b43 ucode assembling language
https://github.com/seemoo-lab/nexmon/blob/master/buildtools/b43/assembler/README
http://bcm-v4.sipsolutions.net/802.11/Microcode

Registers
https://bcm-v4.sipsolutions.net/802.11/Registers/

--Special Purpose Registers
https://github.com/seemoo-lab/nexmon/blob/master/buildtools/b43-v2/debug/include/spr.inc

SPR to handle the RXE
•SPR_RXE_RXHDR_OFFSET - SPR_RXE_RXHDR_LEN: Equivalent to SPR_TXE0_TX_SHM_ADDRbut for receive process, all the receive frames headers are copied in the SHM order to eval-uated part of them, this two registers perform the setting for the receive SHM address, thisis where the RXE puts the received frame header into the SHM, and receive copy length(amount of bytes the RXE copies into SHM).

•SPR_RXE_FIFOCTL0 SPR_RXE_FIFOCTL1: These two registers control the receive process,after the PLCP of a packet is received, the firmware enables data passing between the receiverand the FIFO. When rx is complete, then the firmware pushes the packet in the FIFO up tothe host. All these operations are performed through this register setting.

•SPR_RXE_FRAMELEN: This register reports even while RX in progress and hence increasesduring reception.

•SPR_RXE_Copy_Offset - SPR_RXE_Copy_Length:  These two registers are able to copiesreceived frame into the RX host queue

/* SHM (Shared Memory) offsets */
https://github.com/seemoo-lab/nexmon/blob/master/buildtools/b43-v2/debug/include/shm.inc
./buildtools/b43/debug/include/shm.inc:17:#define SHM(address)		(((address) / 2) + (%assert((address & 1) == 0)))

another technique typeRegisterIndirect Address, in which we use a register to contain a point to memory, this technique can hasan offset explicit in instruction code, in this case is named "Displacement Addressing". The chipsethas 6 SPR to perform the register indirect address, they named offset register (SPR_BASEx withx from 0 to 5), normally some of them contain constant values that point to important parts ofthe SHM like the headers for incoming and outgoing frames, these pointers not change, and thefirmware use their frequently.
[1] https://core.ac.uk/download/pdf/53287734.pdf

Rx data flow
http://netweb.ing.unibs.it/~openfwwf/reception.php



Data Structure in d11
https://github.com/seemoo-lab/nexmon/blob/master/firmwares/bcm4366c0/structs.common.h

Part A. Pass setting from user app nexutil to kernel
Step 1.
Pass paramter from ioctl(cmd=500) to ucode

https://github.com/seemoo-lab/nexmon_csi/blob/ba99ce12a6a42d7e4ec75e6f8ace8f610ed2eb60/src/ioctl.c#L74
#if NEXMON_CHIP == CHIP_VER_BCM4366c0
#define SHM_CSI_COLLECT         0xB80
#define NSSMASK                 0xB81
#define COREMASK                0xB82
#define APPLY_PKT_FILTER        0xB83
#define PKT_FILTER_BYTE         0xB84
#define N_CMP_SRC_MAC           0xB85
#define CMP_SRC_MAC_0_0         0xB86
#define CMP_SRC_MAC_0_1         0xB87
#define CMP_SRC_MAC_0_2         0xB88
#define CMP_SRC_MAC_1_0         0xB89
#define CMP_SRC_MAC_1_1         0xB8A
#define CMP_SRC_MAC_1_2         0xB8B
#define CMP_SRC_MAC_2_0         0xB8C
#define CMP_SRC_MAC_2_1         0xB8D
#define CMP_SRC_MAC_2_2         0xB8E
#define CMP_SRC_MAC_3_0         0xB8F
#define CMP_SRC_MAC_3_1         0xB90
#define CMP_SRC_MAC_3_2         0xB91
#define FORCEDEAF               0xB92
#define CLEANDEAF               0xB93
#define FIFODELAY               0xB94

https://github.com/seemoo-lab/nexmon_csi/blob/ba99ce12a6a42d7e4ec75e6f8ace8f610ed2eb60/src/ioctl.c#L127
wlc_bmac_write_shm(wlc->hw, NSSMASK * 2, ((params->core_nss_mask)&0xf0)>>4);

Note that 
>>> a=0xB81
>>> hex(a<<1)
'0x1702'

Step 2. ucode makes use of the parameters, e.g. for NSSMASK
nexmon_csi/src/csi.ucode.bcm4366c0.10_10_122_20.asm


#define		SHM_CSI_COLLECT		[SHM(0x1700)]
#define		NSSMASK				[SHM(0x1702)]
#define		COREMASK			[SHM(0x1704)]
#define		APPLY_PKT_FILTER	[SHM(0x1706)]
#define		PKT_FILTER_BYTE		[SHM(0x1708)]
#define		N_CMP_SRC_MAC		[SHM(0x170a)]
#define		CMP_SRC_MAC_0_0		SHM(0x170c)
#define		FORCEDEAF			[SHM(0x1724)]
#define		CLEANDEAF			[SHM(0x1726)]
#define		FIFODELAY			[SHM(0x1728)]

and	SPARE1, NSSMASK, SPARE1

Part B. Pass CSI reading from kernel to eth6 interface 

Step 1. Kernel copy CSI to shared memory SPR_BASE1=SHM(0x1600)

{
if (DUMP_CSI!=0){ // xje	DUMP_CSI, 0, dont_dump_csi
    PHYSTATUS0=[0x870], 
    RXCHAN=[0x879], 
    DUMP_CSI=0, 
    > 	calls	enable_carrier_search
    CLEANDEAF=1, 


    OFF1SAFE=SPR_BASE1, 
    [SHM(0x1644:0x1648)]=[SHM((MAC_OFFSET + 10:14))] //uint8 d11csihdr->src[6];
    [SHM(0x164a)]=[SHM((MAC_OFFSET + 22))] //uint16 d11csihdr->seqcnt;
    [SHM(0x164c)]=RXCHAN //uint16 d11csihdr->chanspec;

    //core 0..3 address
    > #define		ACPHY_TBL_ID_CORE0CHANESTTBL	73
    > #define		ACPHY_TBL_ID_CORE1CHANESTTBL	105
    > #define		ACPHY_TBL_ID_CORE2CHANESTTBL	137
    > #define		ACPHY_TBL_ID_CORE3CHANESTTBL	169


    for (SPARE4=0; SPARE4<4; SPARE4++){  //loop_core: core 0..3
        //for each Rx
        if (SPARE4==0) SPARE5=ACPHY_TBL_ID_CORE0CHANESTTBL;
        if (SPARE4==1) SPARE5=ACPHY_TBL_ID_CORE1CHANESTTBL; 
        if (SPARE4==2) SPARE5=ACPHY_TBL_ID_CORE2CHANESTTBL; 
        if (SPARE4==3) SPARE5=ACPHY_TBL_ID_CORE3CHANESTTBL; 
        
        for (SPARE6=0; SPARE6<4;SPARE6++){ 		// NSSTX 0..3
            //> loop_nss:
            SPARE1=SPARE6, 
            SPARE1=SPARE1<<3, 
            SPARE1=SPARE4|SPARE1, 
            [SHM(0x1640)]=SPARE1<<8, //uint16 d11csihdr->csiconf;
            SPARE1=1<<SPARE6, 
            SPARE1=SPARE1&NSSMASK, 
            if (SPARE1!=0){ //
                SPARE1=1<<SPARE4, 
                SPARE1=SPARE1&COREMASK, 
                if (SPARE1!=0){ //
                    > goextract:
                    SPARE2=	0x3800, 
                    SPARE2 = RXCHAN & SPARE2, 
                    SPARE2 = SPARE2>>11, 
                    
                    if (SPARE2==0x4) SPARE3 =16;// chunk_set+ Relative to using 20, 40, or 80 MHz wide channels those are 64, 128, or 256 times four bytes long.
                    else if (SPARE2==0x3) SPARE3=8
                    else SPARE3=4
                    
                    SPARE1=0x8000, //#define NEWCSI	0x8000
                    [SHM(0x1642)]=SPARE1|SPARE3, //uint16 d11csihdr->start; check this is a new frame
                    SPARE2=SPARE6<<8
                    
                    for( ;SPARE3==0; SPARE3--){ // loop_main_csi: SPARE3*16 subcarriers
                        > 	phy_reg_write(0x00d, SPARE5) // [0x00d]=SPARE5
                        > 	phy_reg_write(0x00e, SPARE2) // [0x00e]=SPARE2
                        SPR_BASE1=SHM(0x1600), 
                        for (SPARE1=16;SPARE1>0;SPARE1--){ // slurp:
                            READVAL(off1) //uint32 d11csihdr->csi[CSIDATA_PER_CHUNK>>2];
                            SPR_BASE1=SPR_BASE1+2, 
                        }
                        
                        SPR_BASE1=OFF1SAFE, 
                        
                        SPARE1=[0x86e:0x86f], 
                        [0xaee:0xaef]=SPARE1,
                        
                        SPARE1=SPARE4<<10,
                        [0xaff] = SPARE1 | SPARE3; //missing = ucodecsifrm->NexmonCSICfg & 0xff;
                        
                        SPARE1 = SPARE6<<8; //csiconf = (ucodecsifrm->NexmonCSICfg >> 8)&0x3f;
                        [0xaff] = [0xaff] | SPARE1, 
                        
                        SPARE1=0xaee
                        > 	calls L902
                        
                        if (FIFODELAY !=0){                    
                            SPARE1=SPR_TSF_WORD0+FIFODELAY
                            wait(FIFODELAY) // wait_loop:
                        }
                        
                        SPARE1=0x7fff, 
                        SPARE1=[SHM(0x1642)]+SPARE1, 
                        [SHM(0x1642)]=SPARE1, 
                        
                        SPARE2=SPARE2+16, 
                    }
                } // check condition if (SPARE1!=0)
            } // check condition if (SPARE1!=0)
        } // each Tx SS
    } // each Rx core
    > 	calls disable_carrier_search
    > 	mov 0, CLEANDEAF
} //> dont_dump_csi:
}

Step 2. csi_extractor aggregate CSI fragments to UDP packet and send it over eth6 interface
https://github.com/seemoo-lab/nexmon_csi/blob/ba99ce12a6a42d7e4ec75e6f8ace8f610ed2eb60/src/csi_extractor.c#L77









1111111111111111 appear in all 5 different FIFO buffer,so [0xaee] address does not lead to real copy of payload.
	mov	0x100, SPARE1
	mov	SPARE1, [0xaee]

L902:
	mov	SPARE1, SPR_RXE_RXHDR_OFFSET
	mov	RXE_RXHDR_LEN, SPR_RXE_RXHDR_LEN
	orx	0, 0, 0x1, SPR_RXE_CTL, SPR_RXE_CTL


    if (p->len<1200) {   
        p_dbg=create_new_dbg_frame(wl, p->len);
        dbg_udpfrm = (struct dbg_udp_frame *) p_dbg->data;
        dbg_udpfrm->metaData.hook_count=hook_count;
        dbg_udpfrm->metaData.sk_buff_len=p->len;
        dbg_udpfrm->metaData.RxFrameSize=wlc_rxhdr->rxhdr.RxFrameSize;
        dbg_udpfrm->metaData.Pad=wlc_rxhdr->rxhdr.Pad;
        if (dbg_udpfrm->metaData.Pad){
            struct d11csihdr *ucodecsifrm = (struct d11csihdr *) &wlc_rxhdr->rxhdr.Pad;
            dbg_udpfrm->metaData.csiconf=ucodecsifrm->csiconf;
            dbg_udpfrm->metaData.seqcnt=ucodecsifrm->seqcnt;
            
            dbg_udpfrm->metaData.Pad2=((dbg_udpfrm->metaData.csiconf & 0x3800)>>11);
            if (dbg_udpfrm->metaData.Pad2==0x1){
                p_data_word32= (uint32 *)p->data;
                for (ii=38;ii<40;ii++)
                    p_data_word32[ii]=0x11111111;
            }
            
        }
        memcpy(dbg_udpfrm->payload,p->data,p->len);
        p_dbg->len = sizeof(struct dbg_udp_frame) + p->len;
        skb_pull(p_dbg, sizeof(struct ethernet_ip_udp_header));
        prepend_ethernet_ipv4_udp_header(p_dbg);
        wl->dev->chained->funcs->xmit(wl->dev, wl->dev->chained, p_dbg);
        p_dbg=0;
            
        pkt_buf_free_skb(osh, p, 0);
        return;
    }
